!obj:pylearn2.train.Train {
    "dataset": !obj:pylearn2.datasets.dense_design_matrix.DenseDesignMatrix &dataset {
        "X" : !obj:numpy.random.normal { 'size':[5,3] },
    },
    "model": !obj:pylearn2.models.autoencoder.HigherOrderContractiveAutoencoder {
        "nvis" : 3,
        "nhid" : 4,
        "irange" : 0.05,
        "corruptor": !obj:pylearn2.corruption.BinomialCorruptor {
            "corruption_level": 0.5,
        },
        "num_corruptions": 5,
        "act_enc": "sigmoid",
        "act_dec": "sigmoid",    # Linear activation on the decoder side.
    },
    "algorithm": !obj:pylearn2.training_algorithms.sgd.SGD {
        "learning_rate" : 1e-3,
        "batch_size" : 5,
        "monitoring_dataset" : *dataset,
        cost : !obj:pylearn2.costs.cost.SumOfCosts { 
            costs: [
                [1.0, !obj:pylearn2.costs.autoencoder.MeanBinaryCrossEntropy {} ],
                [0.1, !obj:pylearn2.costs.cost.MethodCost { method: 'contraction_penalty' } ]
            ]
        },

        "cost" : !obj:pylearn2.costs.cost.SumOfCosts { 
            "costs": [
                [1.0, !obj:pylearn2.costs.autoencoder.MeanBinaryCrossEntropy {} ],
                [0.5, !obj:pylearn2.costs.cost.MethodCost { "method": 'contraction_penalty' } ],
                [0.5, !obj:pylearn2.costs.cost.MethodCost { "method": 'higher_order_penalty' } ],
            ]
        },

        "termination_criterion" : !obj:pylearn2.termination_criteria.EpochCounter {
            "max_epochs": 1,
        },
    },
    "save_path": "./garbage.pkl",
}
