!obj:pylearn2.train.Train {
    # Here we specify the dataset to train on. We train on only the first 25k of the examples, so
    # that the rest may be used as a validation set.
    # The "&train" syntax lets us refer back to this object as "*train" elsewhere in the yaml file
    dataset: &train !obj:pylearn2.scripts.icml_2013_wrepl.emotions.emotions_dataset.EmotionsDataset {
        which_set: 'train',
        start: 0,
        stop: 25000
    },
    # Here we specify the model to train as being softmax regression
    model: !obj:pylearn2.models.softmax_regression.SoftmaxRegression {
        # The classes are unbalanced. Set the bias parameters of the softmax regression
        # to make the model start with the right marginals. This should speed convergence
        # of the training algorithm.
        init_bias_target_marginals: *train,
        # Initialize the weights to all 0s
        # The optimization problem is concave so no tie breaking is necessary.
        irange: .0,
        # There are seven different emotions to learn to recognize, i.e., 7 class labels
        n_classes: 7,
        # The inputs are 48x48 pixel images, which this model regards as 48*48=2304 element vectors
        nvis: 2304,
    },
    # BGD is a fairly generic pylearn2 class for doing batch gradient descent and related methods
    algorithm: !obj:pylearn2.training_algorithms.bgd.BGD {
        # Enabling this flag makes the optimization do nonlinear conjugate gradient descent instead
        # of steepest descent.
        conjugate: 1,
        # We do a full line search for each update
        line_search_mode: 'exhaustive',
        # We use a batch size of 5000
        batch_size: 5000,
        # We do three conjugate gradient iterations on each batch
        updates_per_batch: 3,
        # We maintain our initial guess of the step size across minibatches
        reset_alpha: 0,
        # We try to maintain conjugacy across minibatches
        reset_conjugate: 0,
        # We monitor how well we're doing during training on a validation set
        monitoring_dataset:
            {
                'valid' : !obj:pylearn2.scripts.icml_2013_wrepl.emotions.emotions_dataset.EmotionsDataset {
                    which_set: 'train',
                    start: 25000,
                    stop: 28709
                }
            },
        # We stop when validation set classification error hasn't decreased for 10 epochs
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.,
            N: 10
        },
    },
    # We save the model whenever we improve on the validation set classification error
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
        },
    ],
}
